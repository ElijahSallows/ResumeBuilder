@page "/"
@using ResumeBuilder.Shared.Interfaces;
@using ResumeBuilder.UI.Pages.Components
@using ResumeBuilder.UI.Services.Interfaces;
@using ResumeBuilder.Shared.Models;
@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Components.Forms;
@layout FormLayout
@inject IResumeModelService ModelService;

<PageTitle>Resume Builder</PageTitle>

<main class="main-wrapper">
    <aside class="right-menu menu">
        <div class="button-wrapper">
            <button @onclick="@OnGeneratePressed" class="generate-button">
                Generate
                <div class="button-border"></div>
                <div class="button-mask"></div>
            </button>
        </div>
    </aside>
    <div class="resume-wrapper">
        @if (EditContext != null && Model != null)
        {
            <EditForm class="resume" EditContext="@EditContext">
                <DataAnnotationsValidator />
                <section class="user-wrapper section-wrapper">
                    <h2 class="section-header">
                        <span>User Details</span>
                    </h2>

                    <div class="input-wrapper">
                        <label for="user-name">
                            <span>Name</span>
                        </label>
                        <InputText class="input" id="user-name" @bind-Value="Model.User.Name" />
                    </div>

                    <div class="input-wrapper">
                        <label for="user-title">
                            <span>Title</span>
                        </label>
                        <InputText class="input" id="user-title" @bind-Value="Model.User.Title" />
                    </div>

                    <div class="input-wrapper">
                        <label for="user-email">
                            <span>Email Address</span>
                        </label>
                        <InputText class="input" id="user-email" @bind-Value="Model.User.Email" />
                    </div>

                    <div class="input-wrapper">
                        <label for="user-phone">
                            <span>Phone Number</span>
                        </label>
                        <InputText class="input" id="user-phone" @bind-Value="Model.User.Phone" />
                    </div>

                    <div class="input-wrapper">
                        <label for="user-about">
                            <span>About</span>
                        </label>
                        <InputText class="input" id="user-about" @bind-Value="Model.User.About" />
                    </div>

                    <section class="address-wrapper section-wrapper">

                        <div class="input-wrapper">
                            <label for="user-address-city">
                                <span>City</span>
                            </label>
                            <InputText class="input" id="user-address-city" @bind-Value="Model.User.Address.City" />
                        </div>

                        <div class="input-wrapper">
                            <label for="user-address-state">
                                <span>State</span>
                            </label>
                            <InputText class="input" id="user-address-state" @bind-Value="Model.User.Address.State" />
                        </div>

                        <div class="input-wrapper">
                            <label for="user-address-zip">
                                <span>Zip</span>
                            </label>
                            <InputText class="input" id="user-address-zip" @bind-Value="Model.User.Address.Zip" />
                        </div>
                    </section>
                </section>

                <section class="experiences-wrapper section-wrapper">
                    <h2 class="section-header">
                        <span>Experiences</span>
                    </h2>

                    <ExperienceList Experiences="Model.Experiences"
                        OnExperienceDeleted="@DeleteExperience"/>
                    
                </section>

                <section class="skill-wrapper section-wrapper">
                    <h2 class="section-header">
                        <span>Skills</span>
                    </h2>

                    @foreach (var skill in Model.Skills)
                    {
                        <div class="input-wrapper">
                            <InputText class="input" @bind-Value="skill.Name" />
                        </div>
                    }
                </section>

                <section class="education-wrapper section-wrapper">
                    <h2 class="section-header">
                        <span>Education</span>
                    </h2>

                    @foreach (var education in Model.Education)
                    {
                        <div class="input-wrapper">
                            <label for="edu-name">
                                <span class="label">School Name</span>
                            </label>
                            <InputText class="input" id="edu-name" @bind-Value="education.SchoolName" />
                        </div>

                        <div class="input-wrapper">
                            <label for="edu-title">
                                <span class="label">Title</span>
                            </label>
                            <InputText class="input" id="edu-title" @bind-Value="education.Title" />
                        </div>

                        <div class="input-wrapper">
                            <label for="edu-start">
                                <span class="label">Start Date</span>
                            </label>
                            <InputDate class="input" id="edu-start" @bind-Value="education.StartDate" TValue="DateTime" />
                        </div>

                        @if (!education.Current)
                        {
                            <div class="input-wrapper">
                                <label for="edu-end">
                                    <span class="label">End Date</span>
                                </label>
                                <InputDate class="input" id="edu-end" @bind-Value="education.EndDate" TValue="DateTime" />
                            </div>
                        }

                        <div class="input-wrapper">
                            <label for="edu-current">
                                <span class="label">Current?</span>
                            </label>
                            <InputCheckbox class="input" id="edu-current" @bind-Value="education.Current" />
                        </div>

                        <InputTextList List="education.Points" />
                    }
                </section>

                <section class="education-wrapper section-wrapper">
                    <h2 class="section-header">
                        <span>Projects</span>
                    </h2>

                    @foreach (var project in Model.Projects)
                    {
                        <div class="input-wrapper">
                            <label for="project-name">
                                <span class="label">Project Name</span>
                            </label>
                            <InputText class="input" id="project-name" @bind-Value="project.Name" />
                        </div>

                        <div class="input-wrapper">
                            <label for="project-date">
                                <span class="label">Project Date</span>
                            </label>
                            <InputText class="input" id="project-date" @bind-Value="project.Date" />
                        </div>

                        <InputTextList List="project.Points" />
                    }
                </section>

                @*<ValidationSummary />*@
            </EditForm>
        }
        else
        {
            <p>The Model is null. Please report this error.</p>
        }
    </div>
</main>


@code {
    [Parameter]
    public required IResumeInfoModel Model { get; set; }
    public required EditContext EditContext { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Model = ModelService.GetModel();
        EditContext = new EditContext(Model);
        EditContext.OnFieldChanged += EditContext_OnFieldChanged;
        await base.SetParametersAsync(parameters);
    }

    private void EditContext_OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        ModelService.SaveTemp(Model!);
    }

    private void OnGeneratePressed(MouseEventArgs args)
    {
        //ModelService.Save(Model!);
    }

    private void DeleteExperience(IExperience experience)
    {
        //confirm deletion
        Model.Experiences.Remove(experience);
    }

}
