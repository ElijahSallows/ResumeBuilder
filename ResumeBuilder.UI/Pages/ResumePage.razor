@page "/"
@using ResumeBuilder.UI.Pages.Components
@using ResumeBuilder.UI.Services.Interfaces;
@using ResumeBuilder.Shared.Models;
@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Components.Forms;
@layout FormLayout
@inject IResumeModelService ModelService;

<PageTitle>Resume Builder</PageTitle>

@*Temporary message*@
<aside class="top-info">
    <h6>This website is under development. It currently has no function.</h6>
</aside>
<main class="main-wrapper">
    <aside class="left-menu side-menu">
        @*Top row*@
        <div class="menu-header">
            @*<a class="logo" href="https://github.com/ElijahSallows/">
            <span>Elijah</span>
            </a>*@

            <div class="controls">
                <button class="menu header-btn menu-btn oi oi-menu"></button>
                <button class="save header-btn menu-btn oi oi-clipboard" @onclick="@OnSavePressed"></button>

                <button class="undo header-btn state-controls menu-btn oi oi-action-undo"></button>
                <button class="redo header-btn state-controls menu-btn oi oi-action-redo"></button>
            </div>
        </div>

        @*Resume section selectors*@
        <section class="section-selector-wrapper">
            <SectionSelector Model="@Model"
                             OnUpdate="@OnUpdate" />
        </section>

        @*Saved layout selectors*@
        <section class="layout-list">
            @for (int i = 0; i < 5; i++)
            {
                // See https://stackoverflow.com/a/56426146/323447
                int iCopy = i;

                <div class="layout-wrapper @(iCopy == CurrentModelId ? "active" : "")">
                    <button class="layout layout-main menu-btn">@i</button>
                    <button class="layout layout-sub menu-btn hidden oi oi-pencil"></button>
                    <button class="layout layout-sub menu-btn hidden oi oi-trash"></button>
                </div>
            }
        </section>

        @*Generate (and download) PDF*@ @*@onclick="@OnGeneratePressed"*@
        <button class="generate-button">
            Generate
            <div class="button-border"></div>
            <div class="button-mask"></div>
        </button>

        @*<ResumeSectionSelector Sections="" />*@

        @*<div class="model-selector-wrapper">
        @for (int i = 0; i < 5; i++)
        {
        // See https://stackoverflow.com/a/56426146/323447
        int iCopy = i;
        <div class="button-wrapper">
        <button @onclick="() => OnChangeModelPressed(iCopy)" class="model-button @(iCopy == CurrentModelId ? "model-active" : "")">@iCopy</button>
        </div>
        }
        </div>*@

        @*<div class="button-wrapper">
        <button @onclick="@OnDebugPressed" class="debug-button">
        DEBUG
        <div class="button-border"></div>
        <div class="button-mask"></div>
        </button>
        </div>*@
    </aside>

    <div class="resume-wrapper">
        @if (EditContext != null && Model != null)
        {
            <EditForm class="resume" EditContext="@EditContext">
                <DataAnnotationsValidator />
                @if (Model.User.IsActive)
                {
                    <section class="user-wrapper section-wrapper">
                        <UserInfoView Info="@Model.User.Info" />
                    </section>
                }

                @if (Model.Address.IsActive)
                {
                    <section class="address-wrapper section-wrapper">
                        <AddressView Info="@Model.Address.Info" />
                    </section>
                }

                @if (Model.Experiences.IsActive)
                {
                    <section class="experiences-wrapper section-wrapper">
                        <h2 class="section-header">
                            <span>Experiences</span>
                            <button class="oi oi-plus"></button>
                        </h2>

                        <ExperienceList List="Model.Experiences.Info"
                                        OnDeleted="@ConfirmDelete" />
                    </section>
                }


                @if (Model.Skills.IsActive)
                {
                    <section class="skill-wrapper section-wrapper">
                        <h2 class="section-header">
                            <span>Skills</span>
                            <button class="oi oi-plus"></button>
                        </h2>

                        <SkillList List="Model.Skills.Info"
                                   OnDeleted="@ConfirmDelete" />
                    </section>
                }


                @if (Model.Education.IsActive)
                {
                    <section class="education-wrapper section-wrapper">
                        <h2 class="section-header">
                            <span>Education</span>
                            <button class="oi oi-plus"></button>
                        </h2>

                        <EducationList List="Model.Education.Info"
                                       OnDeleted="@ConfirmDelete" />
                    </section>
                }


                @if (Model.Projects.IsActive)
                {
                    <section class="project-wrapper section-wrapper">
                        <h2 class="section-header">
                            <span>Projects</span>
                            <button class="oi oi-plus"></button>
                        </h2>

                        <ProjectList List="Model.Projects.Info"
                                     OnDeleted="@ConfirmDelete" />
                    </section>
                }

                @*<ValidationSummary />*@
            </EditForm>
        }
        else
        {
            <p>The Model is null. Please report this error.</p>
        }
    </div>
    <aside class="right-menu side-menu">
    </aside>
</main>


@code {
    [Parameter]
    public required ResumeInfoModel Model { get; set; }
    public required EditContext EditContext { get; set; }
    private int CurrentModelId { get => ModelService.CurrentModelId; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        // If there is a Temp model, we'll use that. Otherwise, get the last one used.
        Model = ModelService.GetTempModel() ?? ModelService.GetModel();
        EditContext = new EditContext(Model);
        EditContext.OnFieldChanged += EditContext_OnFieldChanged;
        await base.SetParametersAsync(parameters);
    }

    private void EditContext_OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        ModelService.SaveTemp(Model);
    }

    private void OnUpdate()
    {
        ModelService.SaveTemp(Model);
    }

    private void OnChangeModelPressed(int id)
    {
        Model = ModelService.GetModel(id);
    }

    private void OnDebugPressed(MouseEventArgs args)
    {
        Model = ModelService.DebugRegen();
    }

    private void OnSavePressed(MouseEventArgs args)
    {
        ModelService.Save(Model);
    }

    private void OnGeneratePressed(MouseEventArgs args)
    {
        ModelService.GenerateResume(Model);
    }

    private void ConfirmDelete<T>(T obj)
        where T : class
    {
        if (ShouldOpenConfirm(obj))
        {
            //TODO
            Delete(obj);
        }
    }

    private bool ShouldOpenConfirm<T>(T obj)
        where T : class
    {
        return true;
    }

    private void Delete<T>(T obj)
        where T : class
    {
        switch (obj)
        {
            case Experience ex:
                Model.Experiences.Info.Remove(ex);
                break;
            case Education ed:
                Model.Education.Info.Remove(ed);
                break;
            case Skill sk:
                Model.Skills.Info.Remove(sk);
                break;
            case Project pr:
                Model.Projects.Info.Remove(pr);
                break;

            default:
                break;
        }
        ModelService.SaveTemp(Model);
    }
}
